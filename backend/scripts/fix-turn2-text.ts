import { DataSource } from 'typeorm';
import { Choice } from '../src/database/entities/choice.entity';

const dataSource = new DataSource({
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'cto_admin',
  password: 'cto_game_password',
  database: 'cto_game',
  entities: [Choice],
  synchronize: false,
});

const fixTurn2Text = async () => {
  await dataSource.initialize();

  console.log('\n=== Turn 2 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏãúÏûë ===\n');

  // Choice 6: ÏÜåÍ∑úÎ™® ÎßàÏºÄÌåÖ Ïã§Ìñâ - -10ÎßåÏõê ‚Üí -8ÎßåÏõê
  const choice6 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 6 } });

  if (choice6) {
    // ÎπÑÏö© ÎùºÏù∏Ïóê ÏûàÎäî -10Îßå ÏõêÏùÑ -8Îßå ÏõêÏúºÎ°ú ÏàòÏ†ï
    const newText = choice6.text.replace('üí∞ ÎπÑÏö©: -10Îßå Ïõê', 'üí∞ ÎπÑÏö©: -8Îßå Ïõê');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 6 }, { text: newText });

    console.log('[Choice 6] ÏÜåÍ∑úÎ™® ÎßàÏºÄÌåÖ Ïã§Ìñâ');
    console.log('Ïù¥Ï†Ñ: -10Îßå Ïõê');
    console.log('ÏàòÏ†ï: -8Îßå Ïõê');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice6.effects.cash + 'Ïõê\n');
  }

  // Choice 9: CloudWatch Í∏∞Î≥∏ Î™®ÎãàÌÑ∞ÎßÅ Íµ¨Ï∂ï - -5ÎßåÏõê/Ïõî ‚Üí -4ÎßåÏõê/Ïõî
  const choice9 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 9 } });

  if (choice9) {
    // ÎπÑÏö© ÎùºÏù∏Ïóê ÏûàÎäî -5Îßå Ïõê/ÏõîÏùÑ -4Îßå Ïõê/ÏõîÎ°ú ÏàòÏ†ï
    const newText = choice9.text.replace('üí∞ ÎπÑÏö©: -5Îßå Ïõê/Ïõî', 'üí∞ ÎπÑÏö©: -4Îßå Ïõê/Ïõî');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 9 }, { text: newText });

    console.log('[Choice 9] CloudWatch Í∏∞Î≥∏ Î™®ÎãàÌÑ∞ÎßÅ Íµ¨Ï∂ï');
    console.log('Ïù¥Ï†Ñ: -5Îßå Ïõê/Ïõî');
    console.log('ÏàòÏ†ï: -4Îßå Ïõê/Ïõî');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice9.effects.cash + 'Ïõê\n');
  }

  // ÏàòÏ†ï ÌõÑ ÌôïÏù∏
  const turn2Choices = await dataSource
    .createQueryBuilder()
    .select('choice')
    .from(Choice, 'choice')
    .where('choice.turnNumber = :turn', { turn: 2 })
    .orderBy('choice.choiceId')
    .getMany();

  console.log('\n=== ÏàòÏ†ï ÌõÑ Turn 2 ÏÑ†ÌÉùÏßÄ ÌôïÏù∏ ===\n');
  turn2Choices.forEach(choice => {
    const firstLine = choice.text.split('\n')[0];
    const textCost = choice.text.match(/üí∞[^:]+: ([^\n]+)/)?.[1] || 'ÌÖçÏä§Ìä∏Ïóê ÏóÜÏùå';

    console.log(`[Choice ${choice.choiceId}] ${firstLine}`);
    console.log('üìù ÌÖçÏä§Ìä∏ ÌëúÏãú: ' + textCost);
    console.log('üíæ DB Ïã§Ï†ú Í∞í: cash=' + choice.effects.cash + ', trust=' + choice.effects.trust + ', users=' + choice.effects.users);
    console.log('---\n');
  });

  await dataSource.destroy();
};

fixTurn2Text()
  .then(() => {
    console.log('‚úÖ Turn 2 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏôÑÎ£å');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fixing turn 2 text:', error);
    process.exit(1);
  });