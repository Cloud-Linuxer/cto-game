import { DataSource } from 'typeorm';
import { Choice } from '../src/database/entities/choice.entity';

const dataSource = new DataSource({
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'cto_admin',
  password: 'cto_game_password',
  database: 'cto_game',
  entities: [Choice],
  synchronize: false,
});

const fixTurn3Text = async () => {
  await dataSource.initialize();

  console.log('\n=== Turn 3 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏãúÏûë ===\n');

  // Choice 11: Ï∂îÍ∞Ä ÎßàÏºÄÌåÖ Ï∫†ÌéòÏù∏ - -20ÎßåÏõê ‚Üí -16ÎßåÏõê
  const choice11 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 11 } });

  if (choice11) {
    const newText = choice11.text.replace('üí∞ ÎπÑÏö©: -20Îßå Ïõê', 'üí∞ ÎπÑÏö©: -16Îßå Ïõê');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 11 }, { text: newText });

    console.log('[Choice 11] Ï∂îÍ∞Ä ÎßàÏºÄÌåÖ Ï∫†ÌéòÏù∏');
    console.log('Ïù¥Ï†Ñ: -20Îßå Ïõê');
    console.log('ÏàòÏ†ï: -16Îßå Ïõê');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice11.effects.cash + 'Ïõê\n');
  }

  // Choice 12: Aurora RDS Ï†ÑÌôò - -30ÎßåÏõê/Ïõî ‚Üí -24ÎßåÏõê/Ïõî
  const choice12 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 12 } });

  if (choice12) {
    const newText = choice12.text.replace('üí∞ ÎπÑÏö©: -30Îßå Ïõê/Ïõî', 'üí∞ ÎπÑÏö©: -24Îßå Ïõê/Ïõî');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 12 }, { text: newText });

    console.log('[Choice 12] Aurora RDS Ï†ÑÌôò');
    console.log('Ïù¥Ï†Ñ: -30Îßå Ïõê/Ïõî');
    console.log('ÏàòÏ†ï: -24Îßå Ïõê/Ïõî');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice12.effects.cash + 'Ïõê\n');
  }

  // Choice 13: EC2 Ïä§ÏºÄÏùºÏóÖ - -10ÎßåÏõê/Ïõî ‚Üí -8ÎßåÏõê/Ïõî
  const choice13 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 13 } });

  if (choice13) {
    const newText = choice13.text.replace('üí∞ ÎπÑÏö©: -10Îßå Ïõê/Ïõî', 'üí∞ ÎπÑÏö©: -8Îßå Ïõê/Ïõî');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 13 }, { text: newText });

    console.log('[Choice 13] EC2 Ïä§ÏºÄÏùºÏóÖ ‚Äî t4g.mediumÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥Îìú');
    console.log('Ïù¥Ï†Ñ: -10Îßå Ïõê/Ïõî');
    console.log('ÏàòÏ†ï: -8Îßå Ïõê/Ïõî');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice13.effects.cash + 'Ïõê\n');
  }

  // Choice 14: Í∞úÎ∞úÏûê 1Î™Ö Ï±ÑÏö© - -300ÎßåÏõê/Ïõî ‚Üí -240ÎßåÏõê/Ïõî
  const choice14 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 14 } });

  if (choice14) {
    const newText = choice14.text.replace('üí∞ ÎπÑÏö©: -300Îßå Ïõê/Ïõî', 'üí∞ ÎπÑÏö©: -240Îßå Ïõê/Ïõî');

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 14 }, { text: newText });

    console.log('[Choice 14] Í∞úÎ∞úÏûê 1Î™Ö Ï±ÑÏö©');
    console.log('Ïù¥Ï†Ñ: -300Îßå Ïõê/Ïõî');
    console.log('ÏàòÏ†ï: -240Îßå Ïõê/Ïõî');
    console.log('DB Ïã§Ï†ú Í∞í: ' + choice14.effects.cash + 'Ïõê\n');
  }

  // ÏàòÏ†ï ÌõÑ ÌôïÏù∏
  const turn3Choices = await dataSource
    .createQueryBuilder()
    .select('choice')
    .from(Choice, 'choice')
    .where('choice.turnNumber = :turn', { turn: 3 })
    .orderBy('choice.choiceId')
    .getMany();

  console.log('\n=== ÏàòÏ†ï ÌõÑ Turn 3 ÏÑ†ÌÉùÏßÄ ÌôïÏù∏ ===\n');
  turn3Choices.forEach(choice => {
    const firstLine = choice.text.split('\n')[0];
    const textCost = choice.text.match(/üí∞[^:]+: ([^\n]+)/)?.[1] || 'ÌÖçÏä§Ìä∏Ïóê ÏóÜÏùå';

    console.log(`[Choice ${choice.choiceId}] ${firstLine}`);
    console.log('üìù ÌÖçÏä§Ìä∏ ÌëúÏãú: ' + textCost);
    console.log('üíæ DB Ïã§Ï†ú Í∞í: cash=' + choice.effects.cash + ', trust=' + choice.effects.trust + ', users=' + choice.effects.users);
    console.log('---\n');
  });

  await dataSource.destroy();
};

fixTurn3Text()
  .then(() => {
    console.log('‚úÖ Turn 3 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏôÑÎ£å');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fixing turn 3 text:', error);
    process.exit(1);
  });