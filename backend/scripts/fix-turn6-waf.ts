import { DataSource } from 'typeorm';
import { Choice } from '../src/database/entities/choice.entity';

const dataSource = new DataSource({
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'cto_admin',
  password: 'cto_game_password',
  database: 'cto_game',
  entities: [Choice],
  synchronize: false,
});

const fixTurn6WAF = async () => {
  await dataSource.initialize();

  console.log('\n=== Turn 6 Î≥¥Ïïà Ïù∏Ï¶ù Í∞ïÌôî WAF Ï∂îÍ∞Ä ÏãúÏûë ===\n');

  // Choice 55: Î≥¥Ïïà Ïù∏Ï¶ù Í∞ïÌôî
  const choice55 = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 55 } });

  if (choice55) {
    const oldInfra = [...choice55.effects.infra];
    const oldText = choice55.text;

    // WAFÎ•º Ïù∏ÌîÑÎùºÏóê Ï∂îÍ∞Ä
    if (!choice55.effects.infra.includes('WAF')) {
      choice55.effects.infra.push('WAF');
    }

    // ÌÖçÏä§Ìä∏Ïóê Ïù∏ÌîÑÎùº Ï†ïÎ≥¥ Ï∂îÍ∞Ä (ÏóÜÎäî Í≤ΩÏö∞)
    let newText = oldText;
    const lines = oldText.split('\n');

    // Ïù∏ÌîÑÎùº Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
    if (!oldText.includes('üèóÔ∏è')) {
      // ÎπÑÏö© Îã§Ïùå Ï§ÑÏóê Ïù∏ÌîÑÎùº Ï†ïÎ≥¥ Ï∂îÍ∞Ä
      const costLineIndex = lines.findIndex(line => line.includes('üí∞'));
      if (costLineIndex !== -1) {
        lines.splice(costLineIndex + 1, 0, 'üèóÔ∏è Ïù∏ÌîÑÎùº: S3, Redis, WAF');
      }
      newText = lines.join('\n');
    } else {
      // Í∏∞Ï°¥ Ïù∏ÌîÑÎùº Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      newText = oldText.replace(/üèóÔ∏è[^\n]+/, 'üèóÔ∏è Ïù∏ÌîÑÎùº: S3, Redis, WAF');
    }

    await dataSource
      .getRepository(Choice)
      .update({ choiceId: 55 }, {
        effects: choice55.effects,
        text: newText
      });

    console.log('[Choice 55] Î≥¥Ïïà Ïù∏Ï¶ù Í∞ïÌôî ‚Äî ISO 27001 Ï§ÄÎπÑ + WAF Íµ¨ÏÑ±');
    console.log(`Ïù¥Ï†Ñ Ïù∏ÌîÑÎùº: ${JSON.stringify(oldInfra)}`);
    console.log(`ÏàòÏ†ï Ïù∏ÌîÑÎùº: ${JSON.stringify(choice55.effects.infra)}`);
    console.log(`Ïù∏ÌîÑÎùº ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä: üèóÔ∏è Ïù∏ÌîÑÎùº: S3, Redis, WAF\n`);
  }

  // ÏàòÏ†ï ÌõÑ ÌôïÏù∏
  const updatedChoice = await dataSource
    .getRepository(Choice)
    .findOne({ where: { choiceId: 55 } });

  if (updatedChoice) {
    console.log('=== ÏàòÏ†ï ÏôÑÎ£å ÌôïÏù∏ ===');
    console.log(`DB infra Í∞í: ${JSON.stringify(updatedChoice.effects.infra)}`);
    const infraLine = updatedChoice.text.split('\n').find(line => line.includes('üèóÔ∏è'));
    console.log(`ÌÖçÏä§Ìä∏ ÌëúÏãú: ${infraLine || 'Ïù∏ÌîÑÎùº Ï†ïÎ≥¥ ÏóÜÏùå'}`);
  }

  await dataSource.destroy();
};

fixTurn6WAF()
  .then(() => {
    console.log('\n‚úÖ Turn 6 Î≥¥Ïïà Ïù∏Ï¶ù Í∞ïÌôî WAF Ï∂îÍ∞Ä ÏôÑÎ£å');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fixing turn 6 WAF:', error);
    process.exit(1);
  });