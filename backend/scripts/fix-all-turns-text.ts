import { DataSource } from 'typeorm';
import { Choice } from '../src/database/entities/choice.entity';

const dataSource = new DataSource({
  type: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'cto_admin',
  password: 'cto_game_password',
  database: 'cto_game',
  entities: [Choice],
  synchronize: false,
});

// ÎπÑÏö©ÏùÑ ÌïúÍ∏Ä ÌëúÍ∏∞Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
const formatCost = (amount: number): string => {
  const absAmount = Math.abs(amount);

  if (absAmount >= 100000000) {
    const yi = Math.floor(absAmount / 100000000);
    const remainder = absAmount % 100000000;
    if (remainder === 0) {
      return amount < 0 ? `-${yi}Ïñµ Ïõê` : `${yi}Ïñµ Ïõê`;
    } else if (remainder % 10000000 === 0) {
      const chun = remainder / 10000000;
      return amount < 0 ? `-${yi}Ïñµ ${chun}Ï≤úÎßå Ïõê` : `${yi}Ïñµ ${chun}Ï≤úÎßå Ïõê`;
    } else {
      const man = Math.floor(remainder / 10000);
      return amount < 0 ? `-${yi}Ïñµ ${man}Îßå Ïõê` : `${yi}Ïñµ ${man}Îßå Ïõê`;
    }
  } else if (absAmount >= 10000) {
    const man = absAmount / 10000;
    return amount < 0 ? `-${man}Îßå Ïõê` : `${man}Îßå Ïõê`;
  } else if (absAmount >= 1000) {
    const chun = absAmount / 1000;
    if (chun % 1 === 0) {
      return amount < 0 ? `-${chun}Ï≤ú Ïõê` : `${chun}Ï≤ú Ïõê`;
    } else {
      // 8000Ïõê = 8Ï≤ú Ïõê
      const chun = Math.floor(absAmount / 1000);
      return amount < 0 ? `-${chun}Ï≤ú Ïõê` : `${chun}Ï≤ú Ïõê`;
    }
  } else {
    return amount < 0 ? `-${absAmount}Ïõê` : `${absAmount}Ïõê`;
  }
};

const fixAllTurnsText = async () => {
  await dataSource.initialize();

  console.log('\n=== Turn 4-25 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏãúÏûë ===\n');

  // Turn 4Î∂ÄÌÑ∞ 25ÍπåÏßÄ Î™®Îì† ÏÑ†ÌÉùÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
  const allChoices = await dataSource
    .createQueryBuilder()
    .select('choice')
    .from(Choice, 'choice')
    .where('choice.turnNumber >= :minTurn', { minTurn: 4 })
    .andWhere('choice.turnNumber <= :maxTurn', { maxTurn: 25 })
    .orderBy('choice.turnNumber')
    .addOrderBy('choice.choiceId')
    .getMany();

  let fixedCount = 0;
  const mismatches: any[] = [];

  for (const choice of allChoices) {
    const textCostMatch = choice.text.match(/üí∞[^:]+:\s*([^\n]+)/);

    if (textCostMatch && choice.effects.cash !== 0) {
      const textCost = textCostMatch[1].trim();
      const expectedCost = formatCost(choice.effects.cash);

      // ÌÖçÏä§Ìä∏Ïóê ÌëúÏãúÎêú ÎπÑÏö©Í≥º DB Í∞íÏù¥ Îã§Î•∏ Í≤ΩÏö∞
      if (!textCost.includes(expectedCost.replace('-', '').replace('+', ''))) {
        const oldText = choice.text;
        const newText = oldText.replace(/üí∞[^:]+:\s*[^\n]+/, `üí∞ ÎπÑÏö©: ${expectedCost}`);

        // "Ïõî", "/Ïõî" Ï≤òÎ¶¨Î•º ÏúÑÌïú Ï∂îÍ∞Ä Î°úÏßÅ
        if (textCost.includes('/Ïõî') || textCost.includes('Ïõî ')) {
          const expectedCostMonthly = expectedCost + '/Ïõî';
          if (!textCost.includes(expectedCostMonthly.replace('-', ''))) {
            mismatches.push({
              choiceId: choice.choiceId,
              turnNumber: choice.turnNumber,
              title: choice.text.split('\n')[0],
              textCost,
              dbCash: choice.effects.cash,
              expectedCost: expectedCostMonthly
            });

            // ÏàòÏ†ï
            await dataSource
              .getRepository(Choice)
              .update({ choiceId: choice.choiceId }, {
                text: oldText.replace(/üí∞[^:]+:\s*[^\n]+/, `üí∞ ÎπÑÏö©: ${expectedCostMonthly}`)
              });

            fixedCount++;
            console.log(`[Fixed] Choice ${choice.choiceId} (Turn ${choice.turnNumber}): ${textCost} ‚Üí ${expectedCostMonthly}`);
          }
        } else {
          mismatches.push({
            choiceId: choice.choiceId,
            turnNumber: choice.turnNumber,
            title: choice.text.split('\n')[0],
            textCost,
            dbCash: choice.effects.cash,
            expectedCost
          });

          // ÏàòÏ†ï
          await dataSource
            .getRepository(Choice)
            .update({ choiceId: choice.choiceId }, { text: newText });

          fixedCount++;
          console.log(`[Fixed] Choice ${choice.choiceId} (Turn ${choice.turnNumber}): ${textCost} ‚Üí ${expectedCost}`);
        }
      }
    } else if (choice.effects.cash > 0 && !choice.text.includes('üí∞')) {
      // ÏàòÏùµÏù¥ ÏûàÎäîÎç∞ ÎπÑÏö© ÌëúÏãúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞
      const expectedCost = '+' + formatCost(choice.effects.cash);
      console.log(`[Info] Choice ${choice.choiceId} (Turn ${choice.turnNumber}): ÏàòÏùµ ${expectedCost} (ÌÖçÏä§Ìä∏Ïóê ÌëúÏãú ÏóÜÏùå)`);
    }
  }

  console.log('\n=== ÏàòÏ†ï Í≤∞Í≥º ÏöîÏïΩ ===');
  console.log(`Í≤ÄÏÇ¨Ìïú ÏÑ†ÌÉùÏßÄ: ${allChoices.length}Í∞ú`);
  console.log(`ÏàòÏ†ïÌïú ÏÑ†ÌÉùÏßÄ: ${fixedCount}Í∞ú`);

  if (mismatches.length > 0) {
    console.log('\n=== ÏàòÏ†ïÎêú ÏÑ†ÌÉùÏßÄ ÏÉÅÏÑ∏ ===');
    let currentTurn = 0;
    mismatches.forEach(m => {
      if (m.turnNumber !== currentTurn) {
        currentTurn = m.turnNumber;
        console.log(`\n[Turn ${currentTurn}]`);
      }
      console.log(`  Choice ${m.choiceId}: ${m.title}`);
      console.log(`    Ïù¥Ï†Ñ: ${m.textCost}`);
      console.log(`    ÏàòÏ†ï: ${m.expectedCost}`);
    });
  }

  await dataSource.destroy();
};

fixAllTurnsText()
  .then(() => {
    console.log('\n‚úÖ Turn 4-25 ÌÖçÏä§Ìä∏ ÏàòÏ†ï ÏôÑÎ£å');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fixing all turns text:', error);
    process.exit(1);
  });